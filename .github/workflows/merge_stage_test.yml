name: merge_stage_test

on:
  push:
    paths-ignore:
      - ".github/**.md"
      - "docker/**"
      - "docs/**"
      - 'examples/**'
      - '.dev_scripts/**'
      - "README.md"
      - "README_zh-CN.md"
      - "CONTRIBUTING.md"
      - ".pre-commit-config.yaml"
      - ".pre-commit-config-zh-cn.yaml"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_cpu_py:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ['3.10']
        torch: [2.3.1]
    steps:
      - uses: actions/checkout@v3
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true
          python-version: ${{ matrix.python-version }}
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y ffmpeg libturbojpeg python3-dev
      - name: Install PyTorch
        run: |
          uv pip install torch==${{ matrix.torch }} torchvision
      - name: Install MMEngine from main branch
        run: uv pip install git+https://github.com/VBTI-development/onedl-mmengine.git@main
      - name: Install build requirements
        run: uv pip install -r pyproject.toml --group optional  --group build
      - name: Build MMCV from source
        run: uv pip install -e . -v
      - name: Install unit tests dependencies
        run: uv pip install -r pyproject.toml --group test
      - name: Run unit tests
        run: uv run pytest tests

  build_cpu_pt:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ['3.10']
        torch: [ '2.0.0', '2.5.1', '2.6.0']
    steps:
      - uses: actions/checkout@v3
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true
          python-version: ${{ matrix.python-version }}
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y ffmpeg libturbojpeg python3-dev && sudo apt-get clean -y
      - name: Install PyTorch
        run: |
          uv pip install torch==${{ matrix.torch }} torchvision
          uv cache clean
      - name: Install MMEngine from main branch
        run: uv pip install git+https://github.com/VBTI-development/onedl-mmengine.git@main
      - name: Install build requirements
        run: uv pip install -r pyproject.toml --group optional  --group build
      - name: Build MMCV from source
        run: uv pip install -e . -v
      - name: Install unit tests dependencies
        run: uv pip install -r pyproject.toml --group test
      - name: Run unit tests
        run: uv run pytest tests

  build_cu129:
    runs-on: ubuntu-22.04
    container:
      image: nvidia/cuda:12.9.1-cudnn-devel-ubuntu22.04
    strategy:
      matrix:
        python-version: ['3.10']
        torch: ['2.8.0']
    env:
      FORCE_CUDA: 1
      MMCV_CUDA_ARGS: -gencode=arch=compute_61,code=sm_61
      UV_TORCH_BACKEND: cu129
      UV_CACHE_DIR: /__w/_uv_cache # set c
    steps:
      - uses: actions/checkout@v3
      - name: Install basic tools
        run: |
          apt-get update
          apt-get install -y wget build-essential git software-properties-common

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true
          python-version: ${{ matrix.python-version }}
          cache-local-path: /__w/_uv_cache

      # 安装 PyTorch
      - name: Fetch GPG keys
        run: |
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub
      - name: Install system dependencies
        run: apt-get update && apt-get install -y git ffmpeg libturbojpeg python3-dev && apt-get clean -y
      - name: Clean up apt cache and pip cache
        run: |
          apt-get clean
          rm -rf /var/lib/apt/lists/*
          rm -rf ~/.cache/pip
          rm -rf /root/.cache/pip
          rm -rf /tmp/*
      - name: Install PyTorch
        run: |
          uv pip install torch==${{ matrix.torch }} torchvision
          uv cache clean
      - name: Install MMEngine from main branch
        run: uv pip install git+https://github.com/VBTI-development/onedl-mmengine.git@main
      - name: Install ninja to speed the compilation
        run: uv pip install -r pyproject.toml --group optional  --group build
      - name: Build MMCV from source
        run: uv pip install -e . -v
      - name: Install unit tests dependencies
        run: |
          uv pip install -r pyproject.toml --group test
      - name: Run unittests
        run: |
          uv run pytest tests/

  build_windows:
    runs-on: windows-2025
    strategy:
      matrix:
        torch: ['2.1.0']
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v2
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true
          python-version: ${{ matrix.python-version }}
      - name: Install PyTorch
        run: |
          uv pip install torch==${{ matrix.torch }} torchvision
      - name: Install MMEngine from main branch
        run: uv pip install git+https://github.com/VBTI-development/onedl-mmengine.git@main
      - name: Install ninja to speed the compilation
        run: uv pip install -r pyproject.toml --group optional  --group build
      - name: Build MMCV from source
        run: uv pip install -e . -v
      - name: Install unit tests dependencies
        run: |
          uv pip install -r pyproject.toml --group test
      - name: Run unittests
        run: uv run pytest tests/ --ignore tests/test_image/test_io.py
