name: pr_stage_test

on:
  pull_request:
    paths-ignore:
      - ".github/**.md"
      - "docker/**"
      - "docs/**"
      - 'examples/**'
      - '.dev_scripts/**'
      - "README.md"
      - "README_zh-CN.md"
      - "CONTRIBUTING.md"
      - ".pre-commit-config.yaml"
      - ".pre-commit-config-zh-cn.yaml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_cu121:
    runs-on: ubuntu-22.04
    container:
      image: nvidia/cuda:12.1.0-cudnn8-devel-ubuntu22.04
    permissions:
      pull-requests: write
    strategy:
      matrix:
        python-version: ["3.10"]
        torch: ["2.5.1"]
    steps:
      - uses: actions/checkout@v3
      - name: Install basic tools
        run: |
          apt-get update
          apt-get install -y wget build-essential git software-properties-common

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 安装 PyTorch
      - name: Fetch GPG keys
        run: |
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub
      - name: Install system dependencies
        run: apt-get update && apt-get install -y git ffmpeg libturbojpeg
      - name: Install PyTorch
        run: |
          uv pip install torch==${{ matrix.torch }} torchvision
      - name: Install MMEngine from main branch
        run: uv pip install git+https://github.com/VBTI-development/mmengine.git@main
      - name: Install ninja to speed the compilation
        run: uv pip install -r pyproject.toml --extra optional build
      - name: Build MMCV from source
        run: uv pip install -e . -v
      - name: Install unit tests dependencies
        run: |
          uv pip install -r pyproject.toml --extra test
      - name: Run unittests and generate coverage report
        run: |
          uv run coverage run --branch --source mmcv -m pytest tests/
          uv run coverage xml
      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          format: markdown
          output: both
          hide_branch_rate: false
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

  build_cu118:
    runs-on: ubuntu-22.04
    container:
      image: nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04
    strategy:
      matrix:
        python-version: ["3.10"]
        torch: ["2.3.1"]
    steps:
      - uses: actions/checkout@v3
      - name: Install basic tools
        run: |
          apt-get update
          apt-get install -y wget build-essential git software-properties-common

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 安装 PyTorch
      - name: Fetch GPG keys
        run: |
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub
      - name: Install system dependencies
        run: apt-get update && apt-get install -y git ffmpeg libturbojpeg
      - name: Install PyTorch
        run: |
          uv pip install torch==${{ matrix.torch }} torchvision
      - name: Install MMEngine from main branch
        run: uv pip install git+https://github.com/VBTI-development/mmengine.git@main
      - name: Install ninja to speed the compilation
        run: uv pip install -r pyproject.toml --extra optional build
      - name: Build MMCV from source
        run: uv pip install -e . -v
      - name: Install unit tests dependencies
        run: |
          uv pip install -r pyproject.toml --extra test
      - name: Run unittests
        run: |
          uv run pytest tests/

  build_windows_without_ops:
    runs-on: windows-2025
    env:
      MMCV_WITH_OPS: 0
    strategy:
      matrix:
        python-version: ['3.10']
        torch: [2.3.1]
    steps:
      - uses: actions/checkout@v2
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install PyTorch
        run: |
          uv pip install torch==${{ matrix.torch }} torchvision
      - name: Install MMEngine from main branch
        run: uv pip install git+https://github.com/VBTI-development/mmengine.git@main
      - name: Install ninja to speed the compilation
        run: uv pip install -r pyproject.toml --extra optional build
      - name: Build MMCV from source
        run: uv pip install -e . -v
      - name: Install unit tests dependencies
        run: |
          uv pip install -r pyproject.toml --extra test
      - name: Run unittests
        run: uv run pytest tests --ignore=tests/test_ops --ignore tests/test_image/test_io.py

  build_windows:
    runs-on: windows-2025
    strategy:
      matrix:
        python-version: ['3.10']
        torch: [2.3.1]
    steps:
      - uses: actions/checkout@v2
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install PyTorch
        run: |
          uv pip install torch==${{ matrix.torch }} torchvision
      - name: Install MMEngine from main branch
        run: uv pip install git+https://github.com/VBTI-development/mmengine.git@main
      - name: Install ninja to speed the compilation
        run: uv pip install -r pyproject.toml --extra optional build
      - name: Build MMCV from source
        run: uv pip install -e . -v
      - name: Install unit tests dependencies
        run: |
          uv pip install -r pyproject.toml --extra test
      - name: Run unittests
        run: uv run pytest tests/ --ignore tests/test_image/test_io.py
